// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraClient is the client API for Tra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraClient interface {
	Nodes(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (*TraResponse, error)
}

type traClient struct {
	cc grpc.ClientConnInterface
}

func NewTraClient(cc grpc.ClientConnInterface) TraClient {
	return &traClient{cc}
}

func (c *traClient) Nodes(ctx context.Context, in *TraRequest, opts ...grpc.CallOption) (*TraResponse, error) {
	out := new(TraResponse)
	err := c.cc.Invoke(ctx, "/tra.Tra/nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraServer is the server API for Tra service.
// All implementations must embed UnimplementedTraServer
// for forward compatibility
type TraServer interface {
	Nodes(context.Context, *TraRequest) (*TraResponse, error)
	mustEmbedUnimplementedTraServer()
}

// UnimplementedTraServer must be embedded to have forward compatible implementations.
type UnimplementedTraServer struct {
}

func (UnimplementedTraServer) Nodes(context.Context, *TraRequest) (*TraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedTraServer) mustEmbedUnimplementedTraServer() {}

// UnsafeTraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraServer will
// result in compilation errors.
type UnsafeTraServer interface {
	mustEmbedUnimplementedTraServer()
}

func RegisterTraServer(s grpc.ServiceRegistrar, srv TraServer) {
	s.RegisterService(&Tra_ServiceDesc, srv)
}

func _Tra_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tra.Tra/nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServer).Nodes(ctx, req.(*TraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tra_ServiceDesc is the grpc.ServiceDesc for Tra service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tra_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tra.Tra",
	HandlerType: (*TraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nodes",
			Handler:    _Tra_Nodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tra/tra.proto",
}
